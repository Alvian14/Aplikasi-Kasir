/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package desaingui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author LENOVO
 */
public class JFrameDashboard extends javax.swing.JFrame {

    /**
     * Creates new form JFrameDashboard
     */
    public JFrameDashboard() {
        initComponents();
        tampilGrafik();
        tampilGrafik1();
        this.btnDasboard.setBackground(new java.awt.Color(0, 0, 0, 0));
        this.btnProduk.setBackground(new java.awt.Color(0, 0, 0, 0));
        this.btnKaryawan.setBackground(new java.awt.Color(0, 0, 0, 0));
        this.jButton4.setBackground(new java.awt.Color(0, 0, 0, 0));
        this.btnSupplieer.setBackground(new java.awt.Color(0, 0, 0, 0));
        this.btnTransaksi.setBackground(new java.awt.Color(0, 0, 0, 0));
         this.btnLogout.setBackground(new java.awt.Color(0, 0, 0, 0));
        this.btnMember.setBackground(new java.awt.Color(0, 0, 0, 0));
//        this.pendapatanharian.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
//        this.pendapatanminggu.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
//        this.pendapatanbulan.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
//        this.pendapatantahun.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
//        this.pengeluaranmingguan.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
//        this.pengeluaranbulan.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
//        this.pengeluarantahun.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
//        this.pengeluaranperhari.getTableHeader().setFont(new java.awt.Font("Tahoma",0,16));
        tampildata();
                  pendapatanhari();
//                   pendapatanminggu();
                   pendapatanBULAN();
//                   pendapatanTAHUN();
//                   pengeluaranminggu();
                   pengeluaranbulan();
//                   pengeluarantahun();
//                   pengeluaranhari();

                   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDasboard = new javax.swing.JButton();
        btnProduk = new javax.swing.JButton();
        btnKaryawan = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnSupplieer = new javax.swing.JButton();
        btnTransaksi = new javax.swing.JButton();
        fieldpendapatanbulan = new javax.swing.JLabel();
        lbPendapatan = new javax.swing.JLabel();
        lbPendapatan1 = new javax.swing.JLabel();
        btnMember = new javax.swing.JButton();
        lbpengeluaranbulan = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        plPengeluaran = new javax.swing.JPanel();
        plPendapatan = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDasboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDasboardActionPerformed(evt);
            }
        });
        getContentPane().add(btnDasboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 180, 50));

        btnProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProdukActionPerformed(evt);
            }
        });
        getContentPane().add(btnProduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 190, 40));

        btnKaryawan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKaryawanActionPerformed(evt);
            }
        });
        getContentPane().add(btnKaryawan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 190, 40));

        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, 190, 40));

        btnSupplieer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupplieerActionPerformed(evt);
            }
        });
        getContentPane().add(btnSupplieer, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 190, 40));

        btnTransaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransaksiActionPerformed(evt);
            }
        });
        getContentPane().add(btnTransaksi, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 180, 40));

        fieldpendapatanbulan.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fieldpendapatanbulan.setText(" ");
        getContentPane().add(fieldpendapatanbulan, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 220, 120, 30));

        lbPendapatan.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        getContentPane().add(lbPendapatan, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 220, 120, 30));

        lbPendapatan1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        getContentPane().add(lbPendapatan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 220, 120, 30));

        btnMember.setBorder(null);
        btnMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMemberActionPerformed(evt);
            }
        });
        getContentPane().add(btnMember, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 243, 180, 30));

        lbpengeluaranbulan.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        getContentPane().add(lbpengeluaranbulan, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 220, 120, 30));

        btnLogout.setBorder(null);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        getContentPane().add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 20, 110, 30));

        plPengeluaran.setLayout(new java.awt.BorderLayout());
        getContentPane().add(plPengeluaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 390, 510, 320));

        plPendapatan.setLayout(new java.awt.BorderLayout());
        getContentPane().add(plPendapatan, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 390, 510, 320));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/dasboard new final pasti.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void tampildata() {
    try{
            String sql = "SELECT SUM(total_harga) AS pendapatanharini FROM tbl_penjualan WHERE waktu_penjualan >= DATE(NOW()) GROUP BY waktu_penjualan;";
             Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery(sql);
            
            if(r.next()) {
                String pendapatan = r.getString("pendapatanharini");
                this.lbPendapatan.setText(pendapatan);
            }else{
                this.lbPendapatan.setText(String.valueOf("0"));
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "error : " + ex.getMessage());
        }
     try{
            String sql = "SELECT SUM(total_hargabarangbelii) AS pengeluaranhariini FROM tbl_pembelian WHERE waktu_beli >= DATE(NOW()) GROUP BY waktu_beli;";
             Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery(sql);
            
            if(r.next()) {
                String pendapatan = r.getString("pengeluaranhariini");
                this.lbPendapatan1.setText(pendapatan);
            }else{
                this.lbPendapatan1.setText(String.valueOf("0"));
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "error : " + ex.getMessage());
        }
//    try{
//            String sql = "SELECT SUM(total_harga) AS MINGGU FROM tbl_penjualan WHERE waktu_penjualan >= WEEK(NOW()) GROUP BY WEEK(NOW());";
//             Connection c = (Connection) koneksi.configDB();
//            Statement s = c.createStatement();
//            ResultSet r = s.executeQuery(sql);
//            
//            if(r.next()) {
//                String pengeluaran = r.getString("MINGGU");
//                this.pendapatanmingguan.setText(pengeluaran);
//                
//            }
//        }catch(SQLException ex){
//            JOptionPane.showMessageDialog(this, "error : " + ex.getMessage());
//        }
     try{
            String sql = "SELECT SUM(total_harga) AS BULAN FROM tbl_penjualan WHERE waktu_penjualan >= MONTH(NOW()) GROUP BY MONTH(NOW());";
             Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery(sql);
            
            if(r.next()) {
                String pengeluaran = r.getString("BULAN");
                this.fieldpendapatanbulan.setText(pengeluaran);
                
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "error : " + ex.getMessage());
        }
      try{
            String sql = "SELECT SUM(total_hargabarangbelii) AS pengeluaranbulan FROM tbl_pembelian WHERE waktu_beli >= MONTH(NOW()) GROUP BY MONTH(NOW());";
             Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery(sql);
            
            if(r.next()) {
                String pengeluaran = r.getString("pengeluaranbulan");
                this.lbpengeluaranbulan.setText(pengeluaran);
                
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "error : " + ex.getMessage());
        }
   
}
//########################################################################################################################################
    private void pendapatanhari() {
        String[] columnNames = {"Total Pengeluaran", "Tanggal "};
        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);

        try {
            Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT SUM(total_harga), CONCAT(DATE(waktu_penjualan)) AS HARIAN FROM tbl_penjualan GROUP BY CONCAT(DATE(waktu_penjualan));");

            while (rs.next()) {
                String totalpen = rs.getString("SUM(total_harga)"),
                        mingguke = rs.getString("HARIAN");
                        

                // create a single array of one rows worth of data
                String[] data = {totalpen, mingguke};
                tablemodel.addRow(data);
            
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
            
        }
//        this.pendapatanharian.setModel(tablemodel);
    }
//    private void pendapatanminggu() {
//        String[] columnNames = {"Total Pendapatan", "Minggu Ke "};
//        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);
//
//        try {
//            Connection c = (Connection) koneksi.configDB();
//            Statement s = c.createStatement();
//            ResultSet rs = s.executeQuery("SELECT SUM(total_harga), CONCAT(WEEK(waktu_penjualan)) AS MINGGU FROM tbl_penjualan GROUP BY CONCAT(WEEK(waktu_penjualan));");
//
//            while (rs.next()) {
//                String totalpen = rs.getString("SUM(total_harga)"),
//                        mingguke = rs.getString("MINGGU");
//                        
//
//                // create a single array of one rows worth of data
//                String[] data = {totalpen, mingguke};
//                tablemodel.addRow(data);
//
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
//        }
//        this.pendapatanminggu.setModel(tablemodel);
//    }
    private void pendapatanBULAN() {
        String[] columnNames = {"Total Pendapatan", "Bulan Ke "};
        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);

        try {
            Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT SUM(total_harga), CONCAT(MONTH(waktu_penjualan)) AS BULAN FROM tbl_penjualan GROUP BY CONCAT(MONTH(waktu_penjualan));");

            while (rs.next()) {
                String totalpen = rs.getString("SUM(total_harga)"),
                        mingguke = rs.getString("BULAN");
                        

                // create a single array of one rows worth of data
                String[] data = {totalpen, mingguke};
                tablemodel.addRow(data);

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
        }
//       this.pendapatanbulan.setModel(tablemodel);
    }
//     private void pendapatanTAHUN() {
//        String[] columnNames = {"Total Pendapatan", "Tahun "};
//        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);
//
//        try {
//            Connection c = (Connection) koneksi.configDB();
//            Statement s = c.createStatement();
//            ResultSet rs = s.executeQuery("SELECT SUM(total_harga), CONCAT(YEAR(waktu_penjualan)) AS TAHUN FROM tbl_penjualan GROUP BY CONCAT(YEAR(waktu_penjualan));");
//
//            while (rs.next()) {
//                String totalpen = rs.getString("SUM(total_harga)"),
//                        mingguke = rs.getString("TAHUN");
//                        
//
//                // create a single array of one rows worth of data
//                String[] data = {totalpen, mingguke};
//                tablemodel.addRow(data);
//
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
//        }
////        this.pendapatantahun.setModel(tablemodel);
//    }
    
    
    //####################################################Pengeluaran################################################
//     private void pengeluaranhari() {
//        String[] columnNames = {"Total Pengeluaran", "Tanggal "};
//        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);
//
//        try {
//            Connection c = (Connection) koneksi.configDB();
//            Statement s = c.createStatement();
//            ResultSet rs = s.executeQuery("SELECT SUM(total_hargabarangbelii), CONCAT(DATE(waktu_beli)) AS HARIAN FROM tbl_pembelian GROUP BY CONCAT(DATE(waktu_beli));");
//
//            while (rs.next()) {
//                String totalpen = rs.getString("SUM(total_hargabarangbelii)"),
//                        mingguke = rs.getString("HARIAN");
//                        
//
//                // create a single array of one rows worth of data
//                String[] data = {totalpen, mingguke};
//                tablemodel.addRow(data);
//
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
//        }
//        this.lbpengeluaranhari.setText(String.valueOf("0"));
//    }
     private void pengeluaranminggu() {
        String[] columnNames = {"Total Pengeluaran", "Minggu ke "};
        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);

        try {
            Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT SUM(total_hargabarangbelii), CONCAT(WEEK(waktu_beli)) AS MINGGU FROM tbl_pembelian GROUP BY CONCAT(WEEK(waktu_beli));");

            while (rs.next()) {
                String totalpen = rs.getString("SUM(total_hargabarangbelii)"),
                        mingguke = rs.getString("MINGGU");
                        

                // create a single array of one rows worth of data
                String[] data = {totalpen, mingguke};
                tablemodel.addRow(data);

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
        }
//        this.pengeluaranmingguan.setModel(tablemodel);
    }
     private void pengeluaranbulan() {
        String[] columnNames = {"Total Pengeluaran", "Bulan Ke "};
        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);

        try {
            Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT SUM(total_hargabarangbelii), CONCAT(MONTH(waktu_beli)) AS BULAN FROM tbl_pembelian GROUP BY CONCAT(MONTH(waktu_beli));");

            while (rs.next()) {
                String totalpen = rs.getString("SUM(total_hargabarangbelii)"),
                        mingguke = rs.getString("BULAN");
                        

                // create a single array of one rows worth of data
                String[] data = {totalpen, mingguke};
                tablemodel.addRow(data);

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
        }
//        this.pengeluaranbulan.setModel(tablemodel);
    }
      private void pengeluarantahun() {
        String[] columnNames = {"Total Pengeluaran", "Tahun "};
        DefaultTableModel tablemodel = new DefaultTableModel(columnNames, 0);

        try {
            Connection c = (Connection) koneksi.configDB();
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT SUM(total_hargabarangbelii), CONCAT(YEAR(waktu_beli)) AS TAHUN FROM tbl_pembelian GROUP BY CONCAT(YEAR(waktu_beli));");

            while (rs.next()) {
                String totalpen = rs.getString("SUM(total_hargabarangbelii)"),
                        mingguke = rs.getString("TAHUN");
                        

                // create a single array of one rows worth of data
                String[] data = {totalpen, mingguke};
                tablemodel.addRow(data);

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error : " + ex.getMessage());
        }
//        this.pengeluarantahun.setModel(tablemodel);
    }
      
      
      // ##################### TERBARU INI GRAFIK ################################
      
      private double getPendapatan(int bulan){
          try{
              Connection c = (Connection)koneksi.configDB();
              Statement s = c.createStatement();
              ResultSet r = s.executeQuery("SELECT SUM(total_harga) FROM tbl_penjualan WHERE MONTH (waktu_penjualan) = " + bulan);
              
              if(r.next()){
                  return r.getDouble(1);
              }              
          }catch(Exception e){
              e.printStackTrace();
          }
          return 0;
      }
      
      public void tampilGrafik() {
       
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        dataset.setValue(this.getPendapatan(1), "Contribution Amount", "JAN");
        dataset.setValue(this.getPendapatan(2), "Contribution Amount", "FEB");
        dataset.setValue(this.getPendapatan(3), "Contribution Amount", "MAR");
        dataset.setValue(this.getPendapatan(4), "Contribution Amount", "APR");
        dataset.setValue(this.getPendapatan(5), "Contribution Amount", "MEI"); 
        dataset.setValue(this.getPendapatan(6), "Contribution Amount", "JUN");
        dataset.setValue(this.getPendapatan(7), "Contribution Amount", "JUL");
        dataset.setValue(this.getPendapatan(8), "Contribution Amount", "AGU");
        dataset.setValue(this.getPendapatan(9), "Contribution Amount", "SEP");
        dataset.setValue(this.getPendapatan(10), "Contribution Amount", "OKT");
        dataset.setValue(this.getPendapatan(11), "Contribution Amount", "NOV");
        dataset.setValue(this.getPendapatan(12), "Contribution Amount", "DES");
        
        JFreeChart barChart = ChartFactory.createBarChart3D("Grafik Pendapatan", "Bulan", "Tingkat ", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = barChart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        Color clr3 = new Color(0,0,255);
        renderer.setSeriesPaint(0, clr3);
        p.setRangeGridlinePaint(Color.BLUE);
        
        ChartPanel barPanel = new ChartPanel(barChart);
        plPendapatan.removeAll();
        plPendapatan.add(barPanel,BorderLayout.CENTER);
        plPendapatan.validate();
        
    }
     //###########################################################################################################
    private double getPengeluaran(int bulan){
          try{
              Connection c = (Connection)koneksi.configDB();
              Statement s = c.createStatement();
              ResultSet r = s.executeQuery("SELECT SUM(total_hargabarangbelii) FROM tbl_pembelian WHERE MONTH (waktu_beli) = " + bulan);
              
              if(r.next()){
                  return r.getDouble(1);
              }              
          }catch(Exception e){
              e.printStackTrace();
          }
          return 0;
      }
    
    public void tampilGrafik1() {
       
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        dataset.setValue(this.getPengeluaran(1), "Contribution Amount", "JAN");
        dataset.setValue(this.getPengeluaran(2), "Contribution Amount", "FEB");
        dataset.setValue(this.getPengeluaran(3), "Contribution Amount", "MAR");
        dataset.setValue(this.getPengeluaran(4), "Contribution Amount", "APR");
        dataset.setValue(this.getPengeluaran(5), "Contribution Amount", "MEI"); 
        dataset.setValue(this.getPengeluaran(6), "Contribution Amount", "JUN");
        dataset.setValue(this.getPengeluaran(7), "Contribution Amount", "JUL");
        dataset.setValue(this.getPengeluaran(8), "Contribution Amount", "AGU");
        dataset.setValue(this.getPengeluaran(9), "Contribution Amount", "SEP");
        dataset.setValue(this.getPengeluaran(10), "Contribution Amount", "OKT");
        dataset.setValue(this.getPengeluaran(11), "Contribution Amount", "NOV");
        dataset.setValue(this.getPengeluaran(12), "Contribution Amount", "DES");
        
        JFreeChart barChart = ChartFactory.createBarChart3D("Grafik Pengeluaran", "Bulan", "Tingkat ", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = barChart.getCategoryPlot();
//        p.setBackgroundPaint(Color.WHITE);
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        Color clr3 = new Color(0,0,255);
        renderer.setSeriesPaint(0, clr3);
        
        p.setRangeGridlinePaint(Color.BLUE);
        ChartPanel barPanel = new ChartPanel(barChart);
        plPengeluaran.removeAll();
        plPengeluaran.add(barPanel,BorderLayout.CENTER);
        plPengeluaran.validate();
        
    }
     
    private void btnDasboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDasboardActionPerformed
        // TODO add your handling code here:
         new JFrameDashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnDasboardActionPerformed

    private void btnProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProdukActionPerformed
        // TODO add your handling code here:
         new JFrameProduk().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnProdukActionPerformed

    private void btnKaryawanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKaryawanActionPerformed
        // TODO add your handling code here:
         new JFrameKaryawan().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnKaryawanActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        new JFrameLaporan().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnSupplieerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupplieerActionPerformed
        // TODO add your handling code here:
        new JFrameSupplier().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnSupplieerActionPerformed

    private void btnTransaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransaksiActionPerformed
        // TODO add your handling code here:
        new JFrameTransaksi().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnTransaksiActionPerformed

    private void btnMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMemberActionPerformed
       new Member().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnMemberActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        int res = JOptionPane.showConfirmDialog(this, "Apakah anda yakin ingin logout?", "confirm", JOptionPane.YES_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(res == JOptionPane.YES_OPTION){
            new JFramelogin().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDasboard;
    private javax.swing.JButton btnKaryawan;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMember;
    private javax.swing.JButton btnProduk;
    private javax.swing.JButton btnSupplieer;
    private javax.swing.JButton btnTransaksi;
    private javax.swing.JLabel fieldpendapatanbulan;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbPendapatan;
    private javax.swing.JLabel lbPendapatan1;
    private javax.swing.JLabel lbpengeluaranbulan;
    private javax.swing.JPanel plPendapatan;
    private javax.swing.JPanel plPengeluaran;
    // End of variables declaration//GEN-END:variables
}
